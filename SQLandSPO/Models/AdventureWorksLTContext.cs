// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SQLandSPO.Models
{
    public partial class AdventureWorksLTContext : DbContext
    {
        public AdventureWorksLTContext()
        {
        }

        public AdventureWorksLTContext(DbContextOptions<AdventureWorksLTContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Product> Product { get; set; }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                object value = optionsBuilder.UseSqlServer("Data Source=LAPTOP-DNQNR4O7;Initial Catalog=AdventureWorksLT;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product", "SalesLT");

                entity.HasComment("Products sold or used in the manfacturing of sold products.");

                //entity.HasIndex(e => e.Name, "AK_Product_Name")
                //    .IsUnique();

                entity.HasIndex(e => e.ProductNumber, "AK_Product_ProductNumber")
                    .IsUnique();

                //entity.HasIndex(e => e.Rowguid, "AK_Product_rowguid")
                //    .IsUnique();

                //entity.Property(e => e.ProductId)
                //    .HasColumnName("ProductID")
                //    .HasComment("Primary key for Product records.");

                entity.Property(e => e.Color)
                    .HasMaxLength(15)
                    .HasComment("Product color.");

                entity.Property(e => e.DiscontinuedDate)
                    .HasColumnType("datetime")
                    .HasComment("Date the product was discontinued.");

                entity.Property(e => e.ListPrice)
                    .HasColumnType("money")
                    .HasComment("Selling price.");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date and time the record was last updated.");

                //entity.Property(e => e.Name)
                //    .IsRequired()
                //    .HasMaxLength(50)
                //    .HasComment("Name of the product.");

                entity.Property(e => e.ProductCategoryID)
                    .HasColumnName("ProductCategoryID")
                    .HasComment("Product is a member of this product category. Foreign key to ProductCategory.ProductCategoryID. ");

                entity.Property(e => e.ProductModelID)
                    .HasColumnName("ProductModelID")
                    .HasComment("Product is a member of this product model. Foreign key to ProductModel.ProductModelID.");

                entity.Property(e => e.ProductNumber)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasComment("Unique product identification number.");

                //entity.Property(e => e.Rowguid)
                //    .HasColumnName("rowguid")
                //    .HasDefaultValueSql("(newid())")
                //    .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                entity.Property(e => e.SellEndDate)
                    .HasColumnType("datetime")
                    .HasComment("Date the product was no longer available for sale.");

                entity.Property(e => e.SellStartDate)
                    .HasColumnType("datetime")
                    .HasComment("Date the product was available for sale.");

                entity.Property(e => e.Size)
                    .HasMaxLength(5)
                    .HasComment("Product size.");

                entity.Property(e => e.StandardCost)
                    .HasColumnType("money")
                    .HasComment("Standard cost of the product.");

                //entity.Property(e => e.ThumbNailPhoto).HasComment("Small image of the product.");

                //entity.Property(e => e.ThumbnailPhotoFileName)
                //    .HasMaxLength(50)
                //    .HasComment("Small image file name.");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(8, 2)")
                    .HasComment("Product weight.");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}